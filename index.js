var fs = require('fs');
var spawn = require('child_process').spawn;
var readline = require('readline');
var parseString = require('xml2js').parseString;
var cssJson = require('cssjson');

// load configuration
var config = require('./config');

var glyphicons = new Array();


var mkdirSync = function (path) {
  try {
    fs.mkdirSync(path);
  }
  catch(e) {
    if( e.code != 'EEXIST' ){
        throw e;
    }
  }
}

// create folder
mkdirSync(config.svg_output);
mkdirSync(config.tikz_output);

// read glyphicons unicode name from css file
fs.readFile('./node_modules/bootstrap/dist/css/bootstrap.css', function read(error, data) {
    if (error) {
        throw error;
    }

    var bootstrapCssJson = cssJson.toJSON(data.toString());
    for(var rule in bootstrapCssJson.children){
        if(rule.indexOf('glyphicon-') !== -1){
            if(bootstrapCssJson.children[rule].attributes.content){
                var glyphiconName = rule.substr(11,rule.length).split(':').shift();
                var glyphiconUnicode = bootstrapCssJson.children[rule].attributes.content;
                glyphicons.push({
                    name: glyphiconName,
                    unicode: String.fromCharCode(parseInt(glyphiconUnicode.substr(2,4),16))
                })
            }
        }
    }

    // read glyphicons svg from file
    var reader = readline.createInterface({
        input: fs.createReadStream('./node_modules/bootstrap/fonts/glyphicons-halflings-regular.svg')
    });
    reader.on('line', function(line) {
        if(line.indexOf('glyph') !== -1){
            // parse xml-string
            parseString(line, function(error, result){
                if(error){
                    console.log(error);
                }
                else{
                    if(result.glyph){
                        if(result.glyph.$.unicode){
                            for(var glyphicon in glyphicons){
                                if(glyphicons[glyphicon].unicode === result.glyph.$.unicode){
                                    // generate svg content
                                    var comment = '\n<!-- GENERATED BY glyphicons2tikz from Christian Decker -->\n';
                                    var content = '<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" width="1300" height="1300">\n<g transform="scale(1,-1) translate(0,-1300)">\n';
                                    content += line.replace('glyph ', 'path fill="' + config.color + '" ') + '\n';
                                    content += '</g>\n</svg>';
                                    content += comment;
                                    // save svg file
                                    var fileName = config.svg_output + glyphicons[glyphicon].name + ".svg";
                                    var tikzFileName = config.tikz_output + glyphicons[glyphicon].name + ".tex";
                                    fs.writeFile(fileName, content, function(error) {
                                        if(error) {
                                            return console.log(error);
                                        }
                                        // convert to tikz file
                                        console.log('created ' + fileName);
                                        var svg2tikz = spawn('svg2tikz',[fileName, '--figonly', '-o', tikzFileName])
                                        svg2tikz.stdout.on('data',function(data){
                                            console.log(data.toString());
                                        });
                                        svg2tikz.stderr.on('data',function(data){
                                            console.log(data.toString());
                                        });
                                        svg2tikz.on('close',function(data){
                                            console.log('created ' + tikzFileName);
                                        });
                                    });
                                }
                            }
                        }
                    }
                }
            });
        }
    });
});
